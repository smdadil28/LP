import java.util.*;
public class Main {
 private static List<String> grammarRules = new ArrayList<>();
 private static Stack<String> stack = new Stack<>();
 private static String input;
 private static String startSymbol;
 public static void main(String[] args) {
 Scanner scanner = new Scanner(System.in);
 System.out.println("Enter the grammar rules in format A->ab|Ab (Enter'done' to stop):");
 while (true) {
 String rule = scanner.nextLine();
 if (rule.equalsIgnoreCase("done")) break;
 grammarRules.add(rule);
 if (startSymbol == null) {
 startSymbol = rule.split("->")[0];
 }
 }
 System.out.println("Enter the string to parse:");
 input = scanner.nextLine();
 scanner.close();
 System.out.println("\nStack\tInput\tAction");
 System.out.println("$\t" + input + "$ ");
 shiftReduceParsing();
 }
 private static void shiftReduceParsing() {
 int index = 0;
 while (index < input.length()) {
 stack.push(Character.toString(input.charAt(index++)));
 System.out.println("$" + stackToString() + "\t" + input.substring(index)+ "$ SHIFT");
 checkReduction();
 }
 checkReduction();
 if (stack.size() == 1 && stack.peek().equals(startSymbol)) {
 System.out.println("Accepted");
 } else {
 System.out.println("Rejected");
 }
 }
 private static void checkReduction() {
 boolean reduced;
 do {
 reduced = false;
 for (String rule : grammarRules) {
 String[] parts = rule.split("->");
 String lhs = parts[0];
 String[] rhsOptions = parts[1].split("\\|");
 for (String rhs : rhsOptions) {
 if (stackToString().endsWith(rhs)) {
 for (int i = 0; i < rhs.length(); i++) {
 stack.pop();
 }
 stack.push(lhs);
 System.out.println("$" + stackToString() + "\t" +input.substring(stack.size()) + "$\tREDUCE " + lhs + "->" + rhs);
 reduced = true;
 break;
 }
 }
 if (reduced) break;
 }
 } while (reduced);
 }
 private static String stackToString() {
 StringBuilder sb = new StringBuilder();
 for (String s : stack) {
 sb.append(s);
 }
 return sb.toString();
 }
}
